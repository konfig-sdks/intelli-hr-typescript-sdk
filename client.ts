/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import { AxiosRequestConfig } from "axios";
import {
  BusinessEntitiesApi,
  BusinessUnitsApi,
  CustomFieldDefinitionsApi,
  DefaultRemunerationComponentsApi,
  EmploymentConditionsApi,
  EndJobApi,
  ExtendedLeaveApi,
  ExtendedLeaveTypesApi,
  FormsApi,
  JobChangeReasonsApi,
  JobRequirementGroupsApi,
  JobTimelineApi,
  JobsApi,
  LocationsApi,
  PayGradesApi,
  PeopleApi,
  PeopleDocumentsApi,
  PeopleImagesApi,
  PeopleSkillsApi,
  PermissionGroupsApi,
  PersonDocumentsDeprecatedApi,
  PositionTitlesApi,
  QualificationInstancesApi,
  QualificationLibraryItemsApi,
  QualificationStatusesApi,
  QualificationTypesApi,
  RecruitmentSourcesApi,
  RepresentativeTypesApi,
  SkillDisciplinesApi,
  SkillsApi,
  TrainingProvidersApi,
  TrainingStatusesApi,
  TrainingTypesApi,
  TrainingsApi,
  UsersApi,
  WebhookEventsApi,
  WebhooksApi,
  WorkClassesApi,
  WorkRightsApi,
  WorkTypesApi,
  WorkflowEventsApi,
  WorkflowsApi,
} from "./api";
import { Configuration, ConfigurationParameters } from "./configuration";
import { IntelliHrCustom } from "./client-custom";

export class IntelliHr extends IntelliHrCustom {
  readonly businessEntities: BusinessEntitiesApi;
  readonly businessUnits: BusinessUnitsApi;
  readonly customFieldDefinitions: CustomFieldDefinitionsApi;
  readonly defaultRemunerationComponents: DefaultRemunerationComponentsApi;
  readonly employmentConditions: EmploymentConditionsApi;
  readonly endJob: EndJobApi;
  readonly extendedLeave: ExtendedLeaveApi;
  readonly extendedLeaveTypes: ExtendedLeaveTypesApi;
  readonly forms: FormsApi;
  readonly jobChangeReasons: JobChangeReasonsApi;
  readonly jobRequirementGroups: JobRequirementGroupsApi;
  readonly jobTimeline: JobTimelineApi;
  readonly jobs: JobsApi;
  readonly locations: LocationsApi;
  readonly payGrades: PayGradesApi;
  readonly people: PeopleApi;
  readonly peopleDocuments: PeopleDocumentsApi;
  readonly peopleImages: PeopleImagesApi;
  readonly peopleSkills: PeopleSkillsApi;
  readonly permissionGroups: PermissionGroupsApi;
  readonly personDocumentsDeprecated: PersonDocumentsDeprecatedApi;
  readonly positionTitles: PositionTitlesApi;
  readonly qualificationInstances: QualificationInstancesApi;
  readonly qualificationLibraryItems: QualificationLibraryItemsApi;
  readonly qualificationStatuses: QualificationStatusesApi;
  readonly qualificationTypes: QualificationTypesApi;
  readonly recruitmentSources: RecruitmentSourcesApi;
  readonly representativeTypes: RepresentativeTypesApi;
  readonly skillDisciplines: SkillDisciplinesApi;
  readonly skills: SkillsApi;
  readonly trainingProviders: TrainingProvidersApi;
  readonly trainingStatuses: TrainingStatusesApi;
  readonly trainingTypes: TrainingTypesApi;
  readonly trainings: TrainingsApi;
  readonly users: UsersApi;
  readonly webhookEvents: WebhookEventsApi;
  readonly webhooks: WebhooksApi;
  readonly workClasses: WorkClassesApi;
  readonly workRights: WorkRightsApi;
  readonly workTypes: WorkTypesApi;
  readonly workflowEvents: WorkflowEventsApi;
  readonly workflows: WorkflowsApi;

  constructor(configurationParameters: ConfigurationParameters) {
    super(configurationParameters);
    const configuration = new Configuration(configurationParameters);
    this.businessEntities = new BusinessEntitiesApi(configuration);
    this.businessUnits = new BusinessUnitsApi(configuration);
    this.customFieldDefinitions = new CustomFieldDefinitionsApi(configuration);
    this.defaultRemunerationComponents = new DefaultRemunerationComponentsApi(configuration);
    this.employmentConditions = new EmploymentConditionsApi(configuration);
    this.endJob = new EndJobApi(configuration);
    this.extendedLeave = new ExtendedLeaveApi(configuration);
    this.extendedLeaveTypes = new ExtendedLeaveTypesApi(configuration);
    this.forms = new FormsApi(configuration);
    this.jobChangeReasons = new JobChangeReasonsApi(configuration);
    this.jobRequirementGroups = new JobRequirementGroupsApi(configuration);
    this.jobTimeline = new JobTimelineApi(configuration);
    this.jobs = new JobsApi(configuration);
    this.locations = new LocationsApi(configuration);
    this.payGrades = new PayGradesApi(configuration);
    this.people = new PeopleApi(configuration);
    this.peopleDocuments = new PeopleDocumentsApi(configuration);
    this.peopleImages = new PeopleImagesApi(configuration);
    this.peopleSkills = new PeopleSkillsApi(configuration);
    this.permissionGroups = new PermissionGroupsApi(configuration);
    this.personDocumentsDeprecated = new PersonDocumentsDeprecatedApi(configuration);
    this.positionTitles = new PositionTitlesApi(configuration);
    this.qualificationInstances = new QualificationInstancesApi(configuration);
    this.qualificationLibraryItems = new QualificationLibraryItemsApi(configuration);
    this.qualificationStatuses = new QualificationStatusesApi(configuration);
    this.qualificationTypes = new QualificationTypesApi(configuration);
    this.recruitmentSources = new RecruitmentSourcesApi(configuration);
    this.representativeTypes = new RepresentativeTypesApi(configuration);
    this.skillDisciplines = new SkillDisciplinesApi(configuration);
    this.skills = new SkillsApi(configuration);
    this.trainingProviders = new TrainingProvidersApi(configuration);
    this.trainingStatuses = new TrainingStatusesApi(configuration);
    this.trainingTypes = new TrainingTypesApi(configuration);
    this.trainings = new TrainingsApi(configuration);
    this.users = new UsersApi(configuration);
    this.webhookEvents = new WebhookEventsApi(configuration);
    this.webhooks = new WebhooksApi(configuration);
    this.workClasses = new WorkClassesApi(configuration);
    this.workRights = new WorkRightsApi(configuration);
    this.workTypes = new WorkTypesApi(configuration);
    this.workflowEvents = new WorkflowEventsApi(configuration);
    this.workflows = new WorkflowsApi(configuration);
  }

}
