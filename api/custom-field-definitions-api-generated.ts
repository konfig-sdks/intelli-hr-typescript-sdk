/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldDefinitionCreateRequest } from '../models';
// @ts-ignore
import { CustomFieldDefinitionPatchRequest } from '../models';
// @ts-ignore
import { CustomFieldDefinitionPropertyDescription } from '../models';
// @ts-ignore
import { CustomFieldDefinitions } from '../models';
// @ts-ignore
import { CustomFieldDefinitionsList } from '../models';
// @ts-ignore
import { CustomFieldDefinitionsListAllFiltersParameter } from '../models';
// @ts-ignore
import { OptionallyAddTextValidationOfTheCustomFieldDefinitionProperty } from '../models';
// @ts-ignore
import { ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty } from '../models';
// @ts-ignore
import { ThePeopleDropdownDefinitionOfTheCustomFieldDefinitionProperty1 } from '../models';
// @ts-ignore
import { TheSelectDefinitionOfTheCustomFieldDefinitionProperty } from '../models';
// @ts-ignore
import { TheSelectDefinitionOfTheCustomFieldDefinitionProperty1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldDefinitionsApi - axios parameter creator
 * @export
 */
export const CustomFieldDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the created [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Create a Custom Field Definition
         * @param {CustomFieldDefinitionCreateRequest} customFieldDefinitionCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition: async (customFieldDefinitionCreateRequest: CustomFieldDefinitionCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldDefinitionCreateRequest' is not null or undefined
            assertParamExists('createDefinition', 'customFieldDefinitionCreateRequest', customFieldDefinitionCreateRequest)
            const localVarPath = `/custom-field-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldDefinitionCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-field-definitions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldDefinitionCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the [Custom Field Definition](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom-field-definitions/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-field-definitions/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single Custom Field Definition.
         * @summary Find a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefinitionById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom-field-definitions/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-field-definitions/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all Custom Field Definitions.
         * @summary List all Custom Field Definitions
         * @param {CustomFieldDefinitionsListAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[modelType][eq]&#x3D;TRAINING&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filters?: CustomFieldDefinitionsListAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/custom-field-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-field-definitions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the updated [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Update a Custom Field Definition
         * @param {CustomFieldDefinitionPatchRequest} customFieldDefinitionPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionById: async (customFieldDefinitionPatchRequest: CustomFieldDefinitionPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldDefinitionPatchRequest' is not null or undefined
            assertParamExists('updateDefinitionById', 'customFieldDefinitionPatchRequest', customFieldDefinitionPatchRequest)
            const localVarPath = `/custom-field-definitions/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldDefinitionPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom-field-definitions/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldDefinitionPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldDefinitionsApi - functional programming interface
 * @export
 */
export const CustomFieldDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the created [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Create a Custom Field Definition
         * @param {CustomFieldDefinitionsApiCreateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefinition(requestParameters: CustomFieldDefinitionsApiCreateDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldDefinitions>> {
            const customFieldDefinitionCreateRequest: CustomFieldDefinitionCreateRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                apiName: requestParameters.apiName,
                modelType: requestParameters.modelType,
                type: requestParameters.type,
                isSensitive: requestParameters.isSensitive,
                selectDefinition: requestParameters.selectDefinition,
                textDefinition: requestParameters.textDefinition,
                peopleDropdownDefinition: requestParameters.peopleDropdownDefinition
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefinition(customFieldDefinitionCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the [Custom Field Definition](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single Custom Field Definition.
         * @summary Find a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findDefinitionById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldDefinitions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findDefinitionById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all Custom Field Definitions.
         * @summary List all Custom Field Definitions
         * @param {CustomFieldDefinitionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: CustomFieldDefinitionsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldDefinitionsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the updated [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Update a Custom Field Definition
         * @param {CustomFieldDefinitionsApiUpdateDefinitionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinitionById(requestParameters: CustomFieldDefinitionsApiUpdateDefinitionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldDefinitions>> {
            const customFieldDefinitionPatchRequest: CustomFieldDefinitionPatchRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                isEnabled: requestParameters.isEnabled,
                isSensitive: requestParameters.isSensitive,
                selectDefinition: requestParameters.selectDefinition,
                peopleDropdownDefinition: requestParameters.peopleDropdownDefinition
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinitionById(customFieldDefinitionPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldDefinitionsApi - factory interface
 * @export
 */
export const CustomFieldDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldDefinitionsApiFp(configuration)
    return {
        /**
         * Returns the created [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Create a Custom Field Definition
         * @param {CustomFieldDefinitionsApiCreateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition(requestParameters: CustomFieldDefinitionsApiCreateDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldDefinitions> {
            return localVarFp.createDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the [Custom Field Definition](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single Custom Field Definition.
         * @summary Find a Custom Field Definition by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findDefinitionById(options?: AxiosRequestConfig): AxiosPromise<CustomFieldDefinitions> {
            return localVarFp.findDefinitionById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all Custom Field Definitions.
         * @summary List all Custom Field Definitions
         * @param {CustomFieldDefinitionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: CustomFieldDefinitionsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CustomFieldDefinitionsList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the updated [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
         * @summary Update a Custom Field Definition
         * @param {CustomFieldDefinitionsApiUpdateDefinitionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionById(requestParameters: CustomFieldDefinitionsApiUpdateDefinitionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldDefinitions> {
            return localVarFp.updateDefinitionById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDefinition operation in CustomFieldDefinitionsApi.
 * @export
 * @interface CustomFieldDefinitionsApiCreateDefinitionRequest
 */
export type CustomFieldDefinitionsApiCreateDefinitionRequest = {
    
} & CustomFieldDefinitionCreateRequest

/**
 * Request parameters for listAll operation in CustomFieldDefinitionsApi.
 * @export
 * @interface CustomFieldDefinitionsApiListAllRequest
 */
export type CustomFieldDefinitionsApiListAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[modelType][eq]=TRAINING`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {CustomFieldDefinitionsListAllFiltersParameter}
    * @memberof CustomFieldDefinitionsApiListAll
    */
    readonly filters?: CustomFieldDefinitionsListAllFiltersParameter
    
}

/**
 * Request parameters for updateDefinitionById operation in CustomFieldDefinitionsApi.
 * @export
 * @interface CustomFieldDefinitionsApiUpdateDefinitionByIdRequest
 */
export type CustomFieldDefinitionsApiUpdateDefinitionByIdRequest = {
    
} & CustomFieldDefinitionPatchRequest

/**
 * CustomFieldDefinitionsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldDefinitionsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldDefinitionsApiGenerated extends BaseAPI {
    /**
     * Returns the created [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
     * @summary Create a Custom Field Definition
     * @param {CustomFieldDefinitionsApiCreateDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldDefinitionsApiGenerated
     */
    public createDefinition(requestParameters: CustomFieldDefinitionsApiCreateDefinitionRequest, options?: AxiosRequestConfig) {
        return CustomFieldDefinitionsApiFp(this.configuration).createDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the [Custom Field Definition](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @summary Delete a Custom Field Definition by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldDefinitionsApiGenerated
     */
    public deleteById(options?: AxiosRequestConfig) {
        return CustomFieldDefinitionsApiFp(this.configuration).deleteById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single Custom Field Definition.
     * @summary Find a Custom Field Definition by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldDefinitionsApiGenerated
     */
    public findDefinitionById(options?: AxiosRequestConfig) {
        return CustomFieldDefinitionsApiFp(this.configuration).findDefinitionById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all Custom Field Definitions.
     * @summary List all Custom Field Definitions
     * @param {CustomFieldDefinitionsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldDefinitionsApiGenerated
     */
    public listAll(requestParameters: CustomFieldDefinitionsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return CustomFieldDefinitionsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the updated [Custom Field Definition](https://developers.intellihr.io/docs/v1/)
     * @summary Update a Custom Field Definition
     * @param {CustomFieldDefinitionsApiUpdateDefinitionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldDefinitionsApiGenerated
     */
    public updateDefinitionById(requestParameters: CustomFieldDefinitionsApiUpdateDefinitionByIdRequest, options?: AxiosRequestConfig) {
        return CustomFieldDefinitionsApiFp(this.configuration).updateDefinitionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
