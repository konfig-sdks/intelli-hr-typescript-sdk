/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LeaveCreateRequest } from '../models';
// @ts-ignore
import { LeaveCreateRequestLeaveType } from '../models';
// @ts-ignore
import { LeaveCreateResponse } from '../models';
// @ts-ignore
import { LeaveUpdateRequest } from '../models';
// @ts-ignore
import { LeaveUpdateRequestLeaveType } from '../models';
// @ts-ignore
import { LeaveUpdateResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ExtendedLeaveApi - axios parameter creator
 * @export
 */
export const ExtendedLeaveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Extended Leave on an existing Job.
         * @summary Create Extended Leave
         * @param {LeaveCreateRequest} leaveCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (leaveCreateRequest: LeaveCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveCreateRequest' is not null or undefined
            assertParamExists('createNew', 'leaveCreateRequest', leaveCreateRequest)
            const localVarPath = `/extended-leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/extended-leave',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update or Finalise an existing Extended Leave.
         * @summary Update or Finalise Extended Leave
         * @param {LeaveUpdateRequest} leaveUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFinalise: async (leaveUpdateRequest: LeaveUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaveUpdateRequest' is not null or undefined
            assertParamExists('updateFinalise', 'leaveUpdateRequest', leaveUpdateRequest)
            const localVarPath = `/extended-leave/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leaveUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/extended-leave/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leaveUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExtendedLeaveApi - functional programming interface
 * @export
 */
export const ExtendedLeaveApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExtendedLeaveApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Extended Leave on an existing Job.
         * @summary Create Extended Leave
         * @param {ExtendedLeaveApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: ExtendedLeaveApiCreateNewRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveCreateResponse>> {
            const leaveCreateRequest: LeaveCreateRequest = {
                jobId: requestParameters.jobId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                leaveType: requestParameters.leaveType,
                fte: requestParameters.fte
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(leaveCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update or Finalise an existing Extended Leave.
         * @summary Update or Finalise Extended Leave
         * @param {ExtendedLeaveApiUpdateFinaliseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFinalise(requestParameters: ExtendedLeaveApiUpdateFinaliseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeaveUpdateResponse>> {
            const leaveUpdateRequest: LeaveUpdateRequest = {
                jobId: requestParameters.jobId,
                shouldNotFinaliseEndDate: requestParameters.shouldNotFinaliseEndDate,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                leaveType: requestParameters.leaveType,
                fte: requestParameters.fte
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFinalise(leaveUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExtendedLeaveApi - factory interface
 * @export
 */
export const ExtendedLeaveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExtendedLeaveApiFp(configuration)
    return {
        /**
         * Create a new Extended Leave on an existing Job.
         * @summary Create Extended Leave
         * @param {ExtendedLeaveApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: ExtendedLeaveApiCreateNewRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveCreateResponse> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update or Finalise an existing Extended Leave.
         * @summary Update or Finalise Extended Leave
         * @param {ExtendedLeaveApiUpdateFinaliseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFinalise(requestParameters: ExtendedLeaveApiUpdateFinaliseRequest, options?: AxiosRequestConfig): AxiosPromise<LeaveUpdateResponse> {
            return localVarFp.updateFinalise(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNew operation in ExtendedLeaveApi.
 * @export
 * @interface ExtendedLeaveApiCreateNewRequest
 */
export type ExtendedLeaveApiCreateNewRequest = {
    
} & LeaveCreateRequest

/**
 * Request parameters for updateFinalise operation in ExtendedLeaveApi.
 * @export
 * @interface ExtendedLeaveApiUpdateFinaliseRequest
 */
export type ExtendedLeaveApiUpdateFinaliseRequest = {
    
} & LeaveUpdateRequest

/**
 * ExtendedLeaveApiGenerated - object-oriented interface
 * @export
 * @class ExtendedLeaveApiGenerated
 * @extends {BaseAPI}
 */
export class ExtendedLeaveApiGenerated extends BaseAPI {
    /**
     * Create a new Extended Leave on an existing Job.
     * @summary Create Extended Leave
     * @param {ExtendedLeaveApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedLeaveApiGenerated
     */
    public createNew(requestParameters: ExtendedLeaveApiCreateNewRequest, options?: AxiosRequestConfig) {
        return ExtendedLeaveApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update or Finalise an existing Extended Leave.
     * @summary Update or Finalise Extended Leave
     * @param {ExtendedLeaveApiUpdateFinaliseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtendedLeaveApiGenerated
     */
    public updateFinalise(requestParameters: ExtendedLeaveApiUpdateFinaliseRequest, options?: AxiosRequestConfig) {
        return ExtendedLeaveApiFp(this.configuration).updateFinalise(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
