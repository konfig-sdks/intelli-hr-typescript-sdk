/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Skills } from '../models';
// @ts-ignore
import { SkillsCreateRequest } from '../models';
// @ts-ignore
import { SkillsGetAllFiltersParameter } from '../models';
// @ts-ignore
import { SkillsList } from '../models';
// @ts-ignore
import { SkillsPatchRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SkillsApi - axios parameter creator
 * @export
 */
export const SkillsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Skill
         * @summary 
         * @param {SkillsCreateRequest} skillsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSkill: async (skillsCreateRequest: SkillsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillsCreateRequest' is not null or undefined
            assertParamExists('createNewSkill', 'skillsCreateRequest', skillsCreateRequest)
            const localVarPath = `/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skills',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single [Skill](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Skill by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkillById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skills/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skills/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/).
         * @summary List all Skills
         * @param {SkillsGetAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[isBusinessCritical][eq]&#x3D;true&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (filters?: SkillsGetAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skills',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Skill
         * @summary 
         * @param {SkillsPatchRequest} skillsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkillById: async (skillsPatchRequest: SkillsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillsPatchRequest' is not null or undefined
            assertParamExists('updateSkillById', 'skillsPatchRequest', skillsPatchRequest)
            const localVarPath = `/skills/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skills/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillsApi - functional programming interface
 * @export
 */
export const SkillsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Skill
         * @summary 
         * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Skills>> {
            const skillsCreateRequest: SkillsCreateRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                isBusinessCritical: requestParameters.isBusinessCritical,
                skillDisciplineId: requestParameters.skillDisciplineId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSkill(skillsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single [Skill](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Skill by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSkillById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Skills>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSkillById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/).
         * @summary List all Skills
         * @param {SkillsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: SkillsApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Skill
         * @summary 
         * @param {SkillsApiUpdateSkillByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSkillById(requestParameters: SkillsApiUpdateSkillByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Skills>> {
            const skillsPatchRequest: SkillsPatchRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                isBusinessCritical: requestParameters.isBusinessCritical,
                skillDisciplineId: requestParameters.skillDisciplineId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSkillById(skillsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SkillsApi - factory interface
 * @export
 */
export const SkillsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillsApiFp(configuration)
    return {
        /**
         * Create a new Skill
         * @summary 
         * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig): AxiosPromise<Skills> {
            return localVarFp.createNewSkill(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single [Skill](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Skill by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSkillById(options?: AxiosRequestConfig): AxiosPromise<Skills> {
            return localVarFp.findSkillById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/).
         * @summary List all Skills
         * @param {SkillsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: SkillsApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SkillsList> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Skill
         * @summary 
         * @param {SkillsApiUpdateSkillByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSkillById(requestParameters: SkillsApiUpdateSkillByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Skills> {
            return localVarFp.updateSkillById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewSkill operation in SkillsApi.
 * @export
 * @interface SkillsApiCreateNewSkillRequest
 */
export type SkillsApiCreateNewSkillRequest = {
    
} & SkillsCreateRequest

/**
 * Request parameters for getAll operation in SkillsApi.
 * @export
 * @interface SkillsApiGetAllRequest
 */
export type SkillsApiGetAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[isBusinessCritical][eq]=true`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {SkillsGetAllFiltersParameter}
    * @memberof SkillsApiGetAll
    */
    readonly filters?: SkillsGetAllFiltersParameter
    
}

/**
 * Request parameters for updateSkillById operation in SkillsApi.
 * @export
 * @interface SkillsApiUpdateSkillByIdRequest
 */
export type SkillsApiUpdateSkillByIdRequest = {
    
} & SkillsPatchRequest

/**
 * SkillsApiGenerated - object-oriented interface
 * @export
 * @class SkillsApiGenerated
 * @extends {BaseAPI}
 */
export class SkillsApiGenerated extends BaseAPI {
    /**
     * Create a new Skill
     * @summary 
     * @param {SkillsApiCreateNewSkillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public createNewSkill(requestParameters: SkillsApiCreateNewSkillRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).createNewSkill(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single [Skill](https://developers.intellihr.io/docs/v1/).
     * @summary Find a Skill by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public findSkillById(options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).findSkillById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Skills](https://developers.intellihr.io/docs/v1/).
     * @summary List all Skills
     * @param {SkillsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public getAll(requestParameters: SkillsApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Skill
     * @summary 
     * @param {SkillsApiUpdateSkillByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillsApiGenerated
     */
    public updateSkillById(requestParameters: SkillsApiUpdateSkillByIdRequest, options?: AxiosRequestConfig) {
        return SkillsApiFp(this.configuration).updateSkillById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
