/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExtendedLeavePropertyPersonEmployeeNumber } from '../models';
// @ts-ignore
import { People } from '../models';
// @ts-ignore
import { PeopleCreateRequest } from '../models';
// @ts-ignore
import { PeopleCreateRequestAddressesInner } from '../models';
// @ts-ignore
import { PeopleCreateRequestCustomFieldsValue } from '../models';
// @ts-ignore
import { PeopleCreateRequestDateOfBirth } from '../models';
// @ts-ignore
import { PeopleCreateRequestEmailAddressesInner } from '../models';
// @ts-ignore
import { PeopleCreateRequestEmergencyContact } from '../models';
// @ts-ignore
import { PeopleCreateRequestFirstName } from '../models';
// @ts-ignore
import { PeopleCreateRequestMedicalConditionsInner } from '../models';
// @ts-ignore
import { PeopleCreateRequestMiddleName } from '../models';
// @ts-ignore
import { PeopleCreateRequestPhoneNumbersInner } from '../models';
// @ts-ignore
import { PeopleCreateRequestPreferredName } from '../models';
// @ts-ignore
import { PeopleCreateRequestPrimaryEmailAddress } from '../models';
// @ts-ignore
import { PeopleCreateRequestPrimaryPhoneNumber } from '../models';
// @ts-ignore
import { PeopleCreateRequestTitle } from '../models';
// @ts-ignore
import { PeopleCreateRequestUserAccount } from '../models';
// @ts-ignore
import { PeopleCreateRequestWorkRight } from '../models';
// @ts-ignore
import { PeopleCreateRequestWorkRightExpiryDate } from '../models';
// @ts-ignore
import { PeopleList } from '../models';
// @ts-ignore
import { PeopleListAllPeopleFiltersParameter } from '../models';
// @ts-ignore
import { PeopleUpdateRequest } from '../models';
// @ts-ignore
import { PeopleUpdateRequestAddressesInner } from '../models';
// @ts-ignore
import { PeopleUpdateRequestCustomFieldsValue } from '../models';
// @ts-ignore
import { PeopleUpdateRequestEmailAddressesInner } from '../models';
// @ts-ignore
import { PeopleUpdateRequestEmergencyContact } from '../models';
// @ts-ignore
import { PeopleUpdateRequestMedicalConditionsInner } from '../models';
// @ts-ignore
import { PeopleUpdateRequestPhoneNumbersInner } from '../models';
// @ts-ignore
import { PeopleUpdateRequestWorkRight } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleApi - axios parameter creator
 * @export
 */
export const PeopleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a person
         * @summary 
         * @param {PeopleCreateRequest} peopleCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPerson: async (peopleCreateRequest: PeopleCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'peopleCreateRequest' is not null or undefined
            assertParamExists('createNewPerson', 'peopleCreateRequest', peopleCreateRequest)
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single Person record by UUIDv4 identifier.
         * @summary Find a Person by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [People](https://developers.intellihr.io/docs/v1/) as at the current date.
         * @summary List all people
         * @param {PeopleListAllPeopleFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[jobId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {string} [sort] Sorting can be applied in the query string to order the data returned from this endpoint. Sort can be prepended with a minus to return the data in descending (-) order. For example, a sort to get the most recent records first would be &#x60;-createdAt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPeople: async (filters?: PeopleListAllPeopleFiltersParameter, sort?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/people`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a person
         * @summary 
         * @param {PeopleUpdateRequest} peopleUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonById: async (peopleUpdateRequest: PeopleUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'peopleUpdateRequest' is not null or undefined
            assertParamExists('updatePersonById', 'peopleUpdateRequest', peopleUpdateRequest)
            const localVarPath = `/people/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleApi - functional programming interface
 * @export
 */
export const PeopleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a person
         * @summary 
         * @param {PeopleApiCreateNewPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPerson(requestParameters: PeopleApiCreateNewPersonRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<People>> {
            const peopleCreateRequest: PeopleCreateRequest = {
                title: requestParameters.title,
                firstName: requestParameters.firstName,
                middleName: requestParameters.middleName,
                lastName: requestParameters.lastName,
                preferredName: requestParameters.preferredName,
                dateOfBirth: requestParameters.dateOfBirth,
                gender: requestParameters.gender,
                employeeNumber: requestParameters.employeeNumber,
                emergencyContact: requestParameters.emergencyContact,
                primaryEmailAddress: requestParameters.primaryEmailAddress,
                primaryPhoneNumber: requestParameters.primaryPhoneNumber,
                emailAddresses: requestParameters.emailAddresses,
                phoneNumbers: requestParameters.phoneNumbers,
                addresses: requestParameters.addresses,
                customFields: requestParameters.customFields,
                medicalConditions: requestParameters.medicalConditions,
                workRight: requestParameters.workRight,
                workRightExpiryDate: requestParameters.workRightExpiryDate,
                userAccount: requestParameters.userAccount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPerson(peopleCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single Person record by UUIDv4 identifier.
         * @summary Find a Person by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<People>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [People](https://developers.intellihr.io/docs/v1/) as at the current date.
         * @summary List all people
         * @param {PeopleApiListAllPeopleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllPeople(requestParameters: PeopleApiListAllPeopleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllPeople(requestParameters.filters, requestParameters.sort, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a person
         * @summary 
         * @param {PeopleApiUpdatePersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonById(requestParameters: PeopleApiUpdatePersonByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<People>> {
            const peopleUpdateRequest: PeopleUpdateRequest = {
                title: requestParameters.title,
                firstName: requestParameters.firstName,
                middleName: requestParameters.middleName,
                lastName: requestParameters.lastName,
                preferredName: requestParameters.preferredName,
                dateOfBirth: requestParameters.dateOfBirth,
                gender: requestParameters.gender,
                employeeNumber: requestParameters.employeeNumber,
                emergencyContact: requestParameters.emergencyContact,
                emailAddresses: requestParameters.emailAddresses,
                phoneNumbers: requestParameters.phoneNumbers,
                addresses: requestParameters.addresses,
                customFields: requestParameters.customFields,
                medicalConditions: requestParameters.medicalConditions,
                workRight: requestParameters.workRight,
                workRightExpiryDate: requestParameters.workRightExpiryDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersonById(peopleUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleApi - factory interface
 * @export
 */
export const PeopleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleApiFp(configuration)
    return {
        /**
         * Create a person
         * @summary 
         * @param {PeopleApiCreateNewPersonRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPerson(requestParameters: PeopleApiCreateNewPersonRequest, options?: AxiosRequestConfig): AxiosPromise<People> {
            return localVarFp.createNewPerson(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single Person record by UUIDv4 identifier.
         * @summary Find a Person by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(options?: AxiosRequestConfig): AxiosPromise<People> {
            return localVarFp.findById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [People](https://developers.intellihr.io/docs/v1/) as at the current date.
         * @summary List all people
         * @param {PeopleApiListAllPeopleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllPeople(requestParameters: PeopleApiListAllPeopleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PeopleList> {
            return localVarFp.listAllPeople(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a person
         * @summary 
         * @param {PeopleApiUpdatePersonByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonById(requestParameters: PeopleApiUpdatePersonByIdRequest, options?: AxiosRequestConfig): AxiosPromise<People> {
            return localVarFp.updatePersonById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewPerson operation in PeopleApi.
 * @export
 * @interface PeopleApiCreateNewPersonRequest
 */
export type PeopleApiCreateNewPersonRequest = {
    
} & PeopleCreateRequest

/**
 * Request parameters for listAllPeople operation in PeopleApi.
 * @export
 * @interface PeopleApiListAllPeopleRequest
 */
export type PeopleApiListAllPeopleRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[jobId][eq]=dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {PeopleListAllPeopleFiltersParameter}
    * @memberof PeopleApiListAllPeople
    */
    readonly filters?: PeopleListAllPeopleFiltersParameter
    
    /**
    * Sorting can be applied in the query string to order the data returned from this endpoint. Sort can be prepended with a minus to return the data in descending (-) order. For example, a sort to get the most recent records first would be `-createdAt`.
    * @type {string}
    * @memberof PeopleApiListAllPeople
    */
    readonly sort?: string
    
}

/**
 * Request parameters for updatePersonById operation in PeopleApi.
 * @export
 * @interface PeopleApiUpdatePersonByIdRequest
 */
export type PeopleApiUpdatePersonByIdRequest = {
    
} & PeopleUpdateRequest

/**
 * PeopleApiGenerated - object-oriented interface
 * @export
 * @class PeopleApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleApiGenerated extends BaseAPI {
    /**
     * Create a person
     * @summary 
     * @param {PeopleApiCreateNewPersonRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public createNewPerson(requestParameters: PeopleApiCreateNewPersonRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).createNewPerson(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single Person record by UUIDv4 identifier.
     * @summary Find a Person by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public findById(options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).findById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [People](https://developers.intellihr.io/docs/v1/) as at the current date.
     * @summary List all people
     * @param {PeopleApiListAllPeopleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public listAllPeople(requestParameters: PeopleApiListAllPeopleRequest = {}, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).listAllPeople(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a person
     * @summary 
     * @param {PeopleApiUpdatePersonByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleApiGenerated
     */
    public updatePersonById(requestParameters: PeopleApiUpdatePersonByIdRequest, options?: AxiosRequestConfig) {
        return PeopleApiFp(this.configuration).updatePersonById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
