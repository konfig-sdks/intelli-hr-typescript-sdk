/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessUnits } from '../models';
// @ts-ignore
import { BusinessUnitsCreateRequest } from '../models';
// @ts-ignore
import { BusinessUnitsCreateRequestCustomFieldsValue } from '../models';
// @ts-ignore
import { BusinessUnitsList } from '../models';
// @ts-ignore
import { BusinessUnitsListAllFiltersParameter } from '../models';
// @ts-ignore
import { BusinessUnitsPatchRequest } from '../models';
// @ts-ignore
import { BusinessUnitsPatchRequestCustomFieldsValue } from '../models';
// @ts-ignore
import { UUIDv4Property } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BusinessUnitsApi - axios parameter creator
 * @export
 */
export const BusinessUnitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the created [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Business Unit
         * @param {BusinessUnitsCreateRequest} businessUnitsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUnit: async (businessUnitsCreateRequest: BusinessUnitsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessUnitsCreateRequest' is not null or undefined
            assertParamExists('createNewUnit', 'businessUnitsCreateRequest', businessUnitsCreateRequest)
            const localVarPath = `/business-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: businessUnitsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-units',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(businessUnitsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the [Business Unit](https://developers.intellihr.io/docs/v1/)\'s by the given ID.
         * @summary Delete a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-units/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-units/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-units/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-units/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Business Units](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Business Units
         * @param {BusinessUnitsListAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[identifier][eq]&#x3D;Engineering&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filters?: BusinessUnitsListAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-units',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the updated [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Business Unit by ID
         * @param {BusinessUnitsPatchRequest} businessUnitsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (businessUnitsPatchRequest: BusinessUnitsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'businessUnitsPatchRequest' is not null or undefined
            assertParamExists('updateById', 'businessUnitsPatchRequest', businessUnitsPatchRequest)
            const localVarPath = `/business-units/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: businessUnitsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/business-units/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(businessUnitsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessUnitsApi - functional programming interface
 * @export
 */
export const BusinessUnitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessUnitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the created [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Business Unit
         * @param {BusinessUnitsApiCreateNewUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewUnit(requestParameters: BusinessUnitsApiCreateNewUnitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUnits>> {
            const businessUnitsCreateRequest: BusinessUnitsCreateRequest = {
                identifier: requestParameters.identifier,
                name: requestParameters.name,
                code: requestParameters.code,
                notes: requestParameters.notes,
                parentId: requestParameters.parentId,
                isEnabled: requestParameters.isEnabled,
                customFields: requestParameters.customFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewUnit(businessUnitsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the [Business Unit](https://developers.intellihr.io/docs/v1/)\'s by the given ID.
         * @summary Delete a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUnits>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Business Units](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Business Units
         * @param {BusinessUnitsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: BusinessUnitsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUnitsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the updated [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Business Unit by ID
         * @param {BusinessUnitsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: BusinessUnitsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessUnits>> {
            const businessUnitsPatchRequest: BusinessUnitsPatchRequest = {
                identifier: requestParameters.identifier,
                name: requestParameters.name,
                code: requestParameters.code,
                notes: requestParameters.notes,
                parentId: requestParameters.parentId,
                isEnabled: requestParameters.isEnabled,
                customFields: requestParameters.customFields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(businessUnitsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessUnitsApi - factory interface
 * @export
 */
export const BusinessUnitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessUnitsApiFp(configuration)
    return {
        /**
         * Returns the created [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Business Unit
         * @param {BusinessUnitsApiCreateNewUnitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewUnit(requestParameters: BusinessUnitsApiCreateNewUnitRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessUnits> {
            return localVarFp.createNewUnit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the [Business Unit](https://developers.intellihr.io/docs/v1/)\'s by the given ID.
         * @summary Delete a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Business Unit by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(options?: AxiosRequestConfig): AxiosPromise<BusinessUnits> {
            return localVarFp.findById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Business Units](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Business Units
         * @param {BusinessUnitsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: BusinessUnitsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BusinessUnitsList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the updated [Business Unit](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Business Unit by ID
         * @param {BusinessUnitsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: BusinessUnitsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<BusinessUnits> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewUnit operation in BusinessUnitsApi.
 * @export
 * @interface BusinessUnitsApiCreateNewUnitRequest
 */
export type BusinessUnitsApiCreateNewUnitRequest = {
    
} & BusinessUnitsCreateRequest

/**
 * Request parameters for listAll operation in BusinessUnitsApi.
 * @export
 * @interface BusinessUnitsApiListAllRequest
 */
export type BusinessUnitsApiListAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[identifier][eq]=Engineering`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {BusinessUnitsListAllFiltersParameter}
    * @memberof BusinessUnitsApiListAll
    */
    readonly filters?: BusinessUnitsListAllFiltersParameter
    
}

/**
 * Request parameters for updateById operation in BusinessUnitsApi.
 * @export
 * @interface BusinessUnitsApiUpdateByIdRequest
 */
export type BusinessUnitsApiUpdateByIdRequest = {
    
} & BusinessUnitsPatchRequest

/**
 * BusinessUnitsApiGenerated - object-oriented interface
 * @export
 * @class BusinessUnitsApiGenerated
 * @extends {BaseAPI}
 */
export class BusinessUnitsApiGenerated extends BaseAPI {
    /**
     * Returns the created [Business Unit](https://developers.intellihr.io/docs/v1/).
     * @summary Create a new Business Unit
     * @param {BusinessUnitsApiCreateNewUnitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUnitsApiGenerated
     */
    public createNewUnit(requestParameters: BusinessUnitsApiCreateNewUnitRequest, options?: AxiosRequestConfig) {
        return BusinessUnitsApiFp(this.configuration).createNewUnit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the [Business Unit](https://developers.intellihr.io/docs/v1/)\'s by the given ID.
     * @summary Delete a Business Unit by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUnitsApiGenerated
     */
    public deleteById(options?: AxiosRequestConfig) {
        return BusinessUnitsApiFp(this.configuration).deleteById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single [Business Unit](https://developers.intellihr.io/docs/v1/).
     * @summary Find a Business Unit by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUnitsApiGenerated
     */
    public findById(options?: AxiosRequestConfig) {
        return BusinessUnitsApiFp(this.configuration).findById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Business Units](https://developers.intellihr.io/docs/v1/) recorded in the system.
     * @summary List all Business Units
     * @param {BusinessUnitsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUnitsApiGenerated
     */
    public listAll(requestParameters: BusinessUnitsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return BusinessUnitsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the updated [Business Unit](https://developers.intellihr.io/docs/v1/).
     * @summary Update a Business Unit by ID
     * @param {BusinessUnitsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessUnitsApiGenerated
     */
    public updateById(requestParameters: BusinessUnitsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return BusinessUnitsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
