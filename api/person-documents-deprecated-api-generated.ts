/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PersonDocumentsCreateRequest } from '../models';
// @ts-ignore
import { PersonDocumentsCreateRequestPerson } from '../models';
// @ts-ignore
import { PersonDocumentsCreateResponse } from '../models';
// @ts-ignore
import { PersonDocumentsPatchRequest } from '../models';
// @ts-ignore
import { PersonDocumentsPatchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PersonDocumentsDeprecatedApi - axios parameter creator
 * @export
 */
export const PersonDocumentsDeprecatedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {PersonDocumentsCreateRequest} personDocumentsCreateRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createPresignedUploadUrl: async (personDocumentsCreateRequest: PersonDocumentsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personDocumentsCreateRequest' is not null or undefined
            assertParamExists('createPresignedUploadUrl', 'personDocumentsCreateRequest', personDocumentsCreateRequest)
            const localVarPath = `/person-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: personDocumentsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/person-documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(personDocumentsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Document
         * @summary 
         * @param {PersonDocumentsPatchRequest} personDocumentsPatchRequest 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateDocument: async (personDocumentsPatchRequest: PersonDocumentsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personDocumentsPatchRequest' is not null or undefined
            assertParamExists('updateDocument', 'personDocumentsPatchRequest', personDocumentsPatchRequest)
            const localVarPath = `/person-documents/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: personDocumentsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/person-documents/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(personDocumentsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonDocumentsDeprecatedApi - functional programming interface
 * @export
 */
export const PersonDocumentsDeprecatedApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonDocumentsDeprecatedApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createPresignedUploadUrl(requestParameters: PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDocumentsCreateResponse>> {
            const personDocumentsCreateRequest: PersonDocumentsCreateRequest = {
                person: requestParameters.person,
                filename: requestParameters.filename,
                mime: requestParameters.mime,
                size: requestParameters.size,
                extension: requestParameters.extension
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPresignedUploadUrl(personDocumentsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Document
         * @summary 
         * @param {PersonDocumentsDeprecatedApiUpdateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async updateDocument(requestParameters: PersonDocumentsDeprecatedApiUpdateDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonDocumentsPatchResponse>> {
            const personDocumentsPatchRequest: PersonDocumentsPatchRequest = {
                personId: requestParameters.personId,
                filename: requestParameters.filename,
                uploadStatus: requestParameters.uploadStatus
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocument(personDocumentsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonDocumentsDeprecatedApi - factory interface
 * @export
 */
export const PersonDocumentsDeprecatedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonDocumentsDeprecatedApiFp(configuration)
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createPresignedUploadUrl(requestParameters: PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig): AxiosPromise<PersonDocumentsCreateResponse> {
            return localVarFp.createPresignedUploadUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Document
         * @summary 
         * @param {PersonDocumentsDeprecatedApiUpdateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        updateDocument(requestParameters: PersonDocumentsDeprecatedApiUpdateDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<PersonDocumentsPatchResponse> {
            return localVarFp.updateDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPresignedUploadUrl operation in PersonDocumentsDeprecatedApi.
 * @export
 * @interface PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest
 */
export type PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest = {
    
} & PersonDocumentsCreateRequest

/**
 * Request parameters for updateDocument operation in PersonDocumentsDeprecatedApi.
 * @export
 * @interface PersonDocumentsDeprecatedApiUpdateDocumentRequest
 */
export type PersonDocumentsDeprecatedApiUpdateDocumentRequest = {
    
} & PersonDocumentsPatchRequest

/**
 * PersonDocumentsDeprecatedApiGenerated - object-oriented interface
 * @export
 * @class PersonDocumentsDeprecatedApiGenerated
 * @extends {BaseAPI}
 */
export class PersonDocumentsDeprecatedApiGenerated extends BaseAPI {
    /**
     * Create a presigned upload URL
     * @summary 
     * @param {PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PersonDocumentsDeprecatedApiGenerated
     */
    public createPresignedUploadUrl(requestParameters: PersonDocumentsDeprecatedApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig) {
        return PersonDocumentsDeprecatedApiFp(this.configuration).createPresignedUploadUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Document
     * @summary 
     * @param {PersonDocumentsDeprecatedApiUpdateDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PersonDocumentsDeprecatedApiGenerated
     */
    public updateDocument(requestParameters: PersonDocumentsDeprecatedApiUpdateDocumentRequest, options?: AxiosRequestConfig) {
        return PersonDocumentsDeprecatedApiFp(this.configuration).updateDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
