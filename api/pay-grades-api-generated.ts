/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayGradeCreateRequest } from '../models';
// @ts-ignore
import { PayGradeCreateRequestEmploymentCondition } from '../models';
// @ts-ignore
import { PayGradeCreateRequestPayStepsInner } from '../models';
// @ts-ignore
import { PayGradeUpdateRequest } from '../models';
// @ts-ignore
import { PayGradeUpdateRequestEmploymentCondition } from '../models';
// @ts-ignore
import { PayGradeUpdateRequestPayStepsInner } from '../models';
// @ts-ignore
import { PayGrades } from '../models';
// @ts-ignore
import { PayGradesList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayGradesApi - axios parameter creator
 * @export
 */
export const PayGradesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new Pay Grade record with the provided data.
         * @summary Create a new Pay Grade
         * @param {PayGradeCreateRequest} payGradeCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord: async (payGradeCreateRequest: PayGradeCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGradeCreateRequest' is not null or undefined
            assertParamExists('createRecord', 'payGradeCreateRequest', payGradeCreateRequest)
            const localVarPath = `/pay-grades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payGradeCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pay-grades',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payGradeCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Pay Grade by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pay-grades/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pay-grades/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single pay grade.
         * @summary Find a Pay Grade by ID
         * @param {string} [asAt] Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (asAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pay-grades/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (asAt !== undefined) {
                localVarQueryParameter['asAt'] = asAt;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pay-grades/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all pay grades.
         * @summary List all pay grades
         * @param {string} [asAt] Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (asAt?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pay-grades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (asAt !== undefined) {
                localVarQueryParameter['asAt'] = asAt;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pay-grades',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch attributes of an existing Pay Grade record with the provided data.
         * @summary Patch an existing Pay Grade
         * @param {PayGradeUpdateRequest} payGradeUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord: async (payGradeUpdateRequest: PayGradeUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payGradeUpdateRequest' is not null or undefined
            assertParamExists('updateRecord', 'payGradeUpdateRequest', payGradeUpdateRequest)
            const localVarPath = `/pay-grades/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payGradeUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/pay-grades/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payGradeUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayGradesApi - functional programming interface
 * @export
 */
export const PayGradesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayGradesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new Pay Grade record with the provided data.
         * @summary Create a new Pay Grade
         * @param {PayGradesApiCreateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecord(requestParameters: PayGradesApiCreateRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayGrades>> {
            const payGradeCreateRequest: PayGradeCreateRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                code: requestParameters.code,
                employmentCondition: requestParameters.employmentCondition,
                payGradeType: requestParameters.payGradeType,
                isOverridable: requestParameters.isOverridable,
                permanentHourlyRate: requestParameters.permanentHourlyRate,
                permanentHourlyRateCurrency: requestParameters.permanentHourlyRateCurrency,
                casualHourlyRate: requestParameters.casualHourlyRate,
                casualHourlyRateCurrency: requestParameters.casualHourlyRateCurrency,
                annualSalary: requestParameters.annualSalary,
                annualSalaryCurrency: requestParameters.annualSalaryCurrency,
                paySteps: requestParameters.paySteps
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecord(payGradeCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Pay Grade by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single pay grade.
         * @summary Find a Pay Grade by ID
         * @param {PayGradesApiFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(requestParameters: PayGradesApiFindByIdRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayGrades>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(requestParameters.asAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all pay grades.
         * @summary List all pay grades
         * @param {PayGradesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: PayGradesApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayGradesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.asAt, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Patch attributes of an existing Pay Grade record with the provided data.
         * @summary Patch an existing Pay Grade
         * @param {PayGradesApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRecord(requestParameters: PayGradesApiUpdateRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayGrades>> {
            const payGradeUpdateRequest: PayGradeUpdateRequest = {
                description: requestParameters.description,
                effectiveFrom: requestParameters.effectiveFrom,
                effectiveTo: requestParameters.effectiveTo,
                isEnabled: requestParameters.isEnabled,
                name: requestParameters.name,
                code: requestParameters.code,
                employmentCondition: requestParameters.employmentCondition,
                payGradeType: requestParameters.payGradeType,
                isOverridable: requestParameters.isOverridable,
                permanentHourlyRate: requestParameters.permanentHourlyRate,
                permanentHourlyRateCurrency: requestParameters.permanentHourlyRateCurrency,
                casualHourlyRate: requestParameters.casualHourlyRate,
                casualHourlyRateCurrency: requestParameters.casualHourlyRateCurrency,
                annualSalary: requestParameters.annualSalary,
                annualSalaryCurrency: requestParameters.annualSalaryCurrency,
                paySteps: requestParameters.paySteps
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRecord(payGradeUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayGradesApi - factory interface
 * @export
 */
export const PayGradesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayGradesApiFp(configuration)
    return {
        /**
         * Create a new Pay Grade record with the provided data.
         * @summary Create a new Pay Grade
         * @param {PayGradesApiCreateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecord(requestParameters: PayGradesApiCreateRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PayGrades> {
            return localVarFp.createRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Pay Grade by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single pay grade.
         * @summary Find a Pay Grade by ID
         * @param {PayGradesApiFindByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(requestParameters: PayGradesApiFindByIdRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayGrades> {
            return localVarFp.findById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all pay grades.
         * @summary List all pay grades
         * @param {PayGradesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: PayGradesApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayGradesList> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch attributes of an existing Pay Grade record with the provided data.
         * @summary Patch an existing Pay Grade
         * @param {PayGradesApiUpdateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRecord(requestParameters: PayGradesApiUpdateRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PayGrades> {
            return localVarFp.updateRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRecord operation in PayGradesApi.
 * @export
 * @interface PayGradesApiCreateRecordRequest
 */
export type PayGradesApiCreateRecordRequest = {
    
} & PayGradeCreateRequest

/**
 * Request parameters for findById operation in PayGradesApi.
 * @export
 * @interface PayGradesApiFindByIdRequest
 */
export type PayGradesApiFindByIdRequest = {
    
    /**
    * Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data.
    * @type {string}
    * @memberof PayGradesApiFindById
    */
    readonly asAt?: string
    
}

/**
 * Request parameters for getAll operation in PayGradesApi.
 * @export
 * @interface PayGradesApiGetAllRequest
 */
export type PayGradesApiGetAllRequest = {
    
    /**
    * Used to configure what date to return this data, as a [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.6) datetime.   All data returned from the endpoints represent the values of the attributes at a specific point in time.   By default, the current datetime is used, but this parameter can be used to configure a different datetime to see historical data.
    * @type {string}
    * @memberof PayGradesApiGetAll
    */
    readonly asAt?: string
    
}

/**
 * Request parameters for updateRecord operation in PayGradesApi.
 * @export
 * @interface PayGradesApiUpdateRecordRequest
 */
export type PayGradesApiUpdateRecordRequest = {
    
} & PayGradeUpdateRequest

/**
 * PayGradesApiGenerated - object-oriented interface
 * @export
 * @class PayGradesApiGenerated
 * @extends {BaseAPI}
 */
export class PayGradesApiGenerated extends BaseAPI {
    /**
     * Create a new Pay Grade record with the provided data.
     * @summary Create a new Pay Grade
     * @param {PayGradesApiCreateRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayGradesApiGenerated
     */
    public createRecord(requestParameters: PayGradesApiCreateRecordRequest, options?: AxiosRequestConfig) {
        return PayGradesApiFp(this.configuration).createRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the [Pay Grade](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @summary Delete a Pay Grade by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayGradesApiGenerated
     */
    public deleteById(options?: AxiosRequestConfig) {
        return PayGradesApiFp(this.configuration).deleteById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single pay grade.
     * @summary Find a Pay Grade by ID
     * @param {PayGradesApiFindByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayGradesApiGenerated
     */
    public findById(requestParameters: PayGradesApiFindByIdRequest = {}, options?: AxiosRequestConfig) {
        return PayGradesApiFp(this.configuration).findById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all pay grades.
     * @summary List all pay grades
     * @param {PayGradesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayGradesApiGenerated
     */
    public getAll(requestParameters: PayGradesApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return PayGradesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch attributes of an existing Pay Grade record with the provided data.
     * @summary Patch an existing Pay Grade
     * @param {PayGradesApiUpdateRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayGradesApiGenerated
     */
    public updateRecord(requestParameters: PayGradesApiUpdateRecordRequest, options?: AxiosRequestConfig) {
        return PayGradesApiFp(this.configuration).updateRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
