/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JobEndPatchRequest } from '../models';
// @ts-ignore
import { JobEndPatchResponse } from '../models';
// @ts-ignore
import { JobEndRemoveResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EndJobApi - axios parameter creator
 * @export
 */
export const EndJobApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If a job end date has been finalised, this will cancel the finalisation
         * @summary Cancel job end date
         * @param {} [uNKNOWNPARAMETERNAME] Whether to cancel the disabling of the users account upon the job end date, if user doesn\&#39;t exist the Boolean has no effect yet the request will still succeed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEndDate: async (uNKNOWNPARAMETERNAME?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/job-end/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (uNKNOWNPARAMETERNAME !== undefined) {
                localVarQueryParameter['cancelDisablingUserAccount'] = uNKNOWNPARAMETERNAME;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/job-end/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an end date, and finalise a job.
         * @summary End a job
         * @param {JobEndPatchRequest} jobEndPatchRequest 
         * @param {} [uNKNOWNPARAMETERNAME] If true, do not finalise the job.
         * @param {} [uNKNOWNPARAMETERNAME2] If true, keeps the user account when finalising the job.
         * @param {} [uNKNOWNPARAMETERNAME3] When true, no events will be fired from this action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobFinalize: async (jobEndPatchRequest: JobEndPatchRequest, uNKNOWNPARAMETERNAME?: , uNKNOWNPARAMETERNAME2?: , uNKNOWNPARAMETERNAME3?: , options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobEndPatchRequest' is not null or undefined
            assertParamExists('jobFinalize', 'jobEndPatchRequest', jobEndPatchRequest)
            const localVarPath = `/job-end/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (uNKNOWNPARAMETERNAME !== undefined) {
                localVarQueryParameter['shouldNotFinaliseEndDate'] = uNKNOWNPARAMETERNAME;
            }

            if (uNKNOWNPARAMETERNAME2 !== undefined) {
                localVarQueryParameter['shouldRetainUserAccount'] = uNKNOWNPARAMETERNAME2;
            }

            if (uNKNOWNPARAMETERNAME3 !== undefined) {
                localVarQueryParameter['suppressEvents'] = uNKNOWNPARAMETERNAME3;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: jobEndPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/job-end/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(jobEndPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndJobApi - functional programming interface
 * @export
 */
export const EndJobApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndJobApiAxiosParamCreator(configuration)
    return {
        /**
         * If a job end date has been finalised, this will cancel the finalisation
         * @summary Cancel job end date
         * @param {EndJobApiCancelEndDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelEndDate(requestParameters: EndJobApiCancelEndDateRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobEndRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelEndDate(requestParameters.uNKNOWNPARAMETERNAME, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set an end date, and finalise a job.
         * @summary End a job
         * @param {EndJobApiJobFinalizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobFinalize(requestParameters: EndJobApiJobFinalizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobEndPatchResponse>> {
            const jobEndPatchRequest: JobEndPatchRequest = {
                endDate: requestParameters.endDate,
                reassignDirectReportsTo: requestParameters.reassignDirectReportsTo,
                turnoverType: requestParameters.turnoverType,
                turnoverReason: requestParameters.turnoverReason
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobFinalize(jobEndPatchRequest, requestParameters.uNKNOWNPARAMETERNAME, requestParameters.uNKNOWNPARAMETERNAME2, requestParameters.uNKNOWNPARAMETERNAME3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndJobApi - factory interface
 * @export
 */
export const EndJobApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndJobApiFp(configuration)
    return {
        /**
         * If a job end date has been finalised, this will cancel the finalisation
         * @summary Cancel job end date
         * @param {EndJobApiCancelEndDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEndDate(requestParameters: EndJobApiCancelEndDateRequest = {}, options?: AxiosRequestConfig): AxiosPromise<JobEndRemoveResponse> {
            return localVarFp.cancelEndDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an end date, and finalise a job.
         * @summary End a job
         * @param {EndJobApiJobFinalizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobFinalize(requestParameters: EndJobApiJobFinalizeRequest, options?: AxiosRequestConfig): AxiosPromise<JobEndPatchResponse> {
            return localVarFp.jobFinalize(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelEndDate operation in EndJobApi.
 * @export
 * @interface EndJobApiCancelEndDateRequest
 */
export type EndJobApiCancelEndDateRequest = {
    
    /**
    * Whether to cancel the disabling of the users account upon the job end date, if user doesn\'t exist the Boolean has no effect yet the request will still succeed.
    * @type {}
    * @memberof EndJobApiCancelEndDate
    */
    readonly uNKNOWNPARAMETERNAME?: 
    
}

/**
 * Request parameters for jobFinalize operation in EndJobApi.
 * @export
 * @interface EndJobApiJobFinalizeRequest
 */
export type EndJobApiJobFinalizeRequest = {
    
    /**
    * If true, do not finalise the job.
    * @type {}
    * @memberof EndJobApiJobFinalize
    */
    readonly uNKNOWNPARAMETERNAME?: 
    
    /**
    * If true, keeps the user account when finalising the job.
    * @type {}
    * @memberof EndJobApiJobFinalize
    */
    readonly uNKNOWNPARAMETERNAME2?: 
    
    /**
    * When true, no events will be fired from this action
    * @type {}
    * @memberof EndJobApiJobFinalize
    */
    readonly uNKNOWNPARAMETERNAME3?: 
    
} & JobEndPatchRequest

/**
 * EndJobApiGenerated - object-oriented interface
 * @export
 * @class EndJobApiGenerated
 * @extends {BaseAPI}
 */
export class EndJobApiGenerated extends BaseAPI {
    /**
     * If a job end date has been finalised, this will cancel the finalisation
     * @summary Cancel job end date
     * @param {EndJobApiCancelEndDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndJobApiGenerated
     */
    public cancelEndDate(requestParameters: EndJobApiCancelEndDateRequest = {}, options?: AxiosRequestConfig) {
        return EndJobApiFp(this.configuration).cancelEndDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an end date, and finalise a job.
     * @summary End a job
     * @param {EndJobApiJobFinalizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndJobApiGenerated
     */
    public jobFinalize(requestParameters: EndJobApiJobFinalizeRequest, options?: AxiosRequestConfig) {
        return EndJobApiFp(this.configuration).jobFinalize(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
