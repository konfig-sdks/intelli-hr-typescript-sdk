/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkflowsPatchRequest } from '../models';
// @ts-ignore
import { WorkflowsPatchRequestWorkflowFormDesignsInner } from '../models';
// @ts-ignore
import { WorkflowsPatchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export const WorkflowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Trigger a Workflow and related Workflow Form Designs.   This endpoint supports Workflows that are linked to Job onboarding, offboarding, role change and extended leave.  Currently the recipient and email address type for the individual forms will be automatically set based on the Respondent Type on the Form Design.  Form Designs with a Respondent Type of `Supervisor` for a job with no supervisor currently are not supported as no default option can be selected.
         * @summary Trigger a Workflow by ID
         * @param {string} id The id of the Workflow to trigger.
         * @param {WorkflowsPatchRequest} workflowsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerById: async (id: string, workflowsPatchRequest: WorkflowsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('triggerById', 'id', id)
            // verify required parameter 'workflowsPatchRequest' is not null or undefined
            assertParamExists('triggerById', 'workflowsPatchRequest', workflowsPatchRequest)
            const localVarPath = `/workflows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workflows/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export const WorkflowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Trigger a Workflow and related Workflow Form Designs.   This endpoint supports Workflows that are linked to Job onboarding, offboarding, role change and extended leave.  Currently the recipient and email address type for the individual forms will be automatically set based on the Respondent Type on the Form Design.  Form Designs with a Respondent Type of `Supervisor` for a job with no supervisor currently are not supported as no default option can be selected.
         * @summary Trigger a Workflow by ID
         * @param {WorkflowsApiTriggerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerById(requestParameters: WorkflowsApiTriggerByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowsPatchResponse>> {
            const workflowsPatchRequest: WorkflowsPatchRequest = {
                jobId: requestParameters.jobId,
                workflowFormDesigns: requestParameters.workflowFormDesigns
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerById(requestParameters.id, workflowsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowsApi - factory interface
 * @export
 */
export const WorkflowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowsApiFp(configuration)
    return {
        /**
         * Trigger a Workflow and related Workflow Form Designs.   This endpoint supports Workflows that are linked to Job onboarding, offboarding, role change and extended leave.  Currently the recipient and email address type for the individual forms will be automatically set based on the Respondent Type on the Form Design.  Form Designs with a Respondent Type of `Supervisor` for a job with no supervisor currently are not supported as no default option can be selected.
         * @summary Trigger a Workflow by ID
         * @param {WorkflowsApiTriggerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerById(requestParameters: WorkflowsApiTriggerByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WorkflowsPatchResponse> {
            return localVarFp.triggerById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for triggerById operation in WorkflowsApi.
 * @export
 * @interface WorkflowsApiTriggerByIdRequest
 */
export type WorkflowsApiTriggerByIdRequest = {
    
    /**
    * The id of the Workflow to trigger.
    * @type {string}
    * @memberof WorkflowsApiTriggerById
    */
    readonly id: string
    
} & WorkflowsPatchRequest

/**
 * WorkflowsApiGenerated - object-oriented interface
 * @export
 * @class WorkflowsApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowsApiGenerated extends BaseAPI {
    /**
     * Trigger a Workflow and related Workflow Form Designs.   This endpoint supports Workflows that are linked to Job onboarding, offboarding, role change and extended leave.  Currently the recipient and email address type for the individual forms will be automatically set based on the Respondent Type on the Form Design.  Form Designs with a Respondent Type of `Supervisor` for a job with no supervisor currently are not supported as no default option can be selected.
     * @summary Trigger a Workflow by ID
     * @param {WorkflowsApiTriggerByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiGenerated
     */
    public triggerById(requestParameters: WorkflowsApiTriggerByIdRequest, options?: AxiosRequestConfig) {
        return WorkflowsApiFp(this.configuration).triggerById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
