/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PersonIdImageCreateRequest } from '../models';
// @ts-ignore
import { PersonIdImageCreateResponse } from '../models';
// @ts-ignore
import { PersonIdImageFindResponse } from '../models';
// @ts-ignore
import { PersonIdImagePatchRequest } from '../models';
// @ts-ignore
import { PersonIdImagePatchRequestCoordinates } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleImagesApi - axios parameter creator
 * @export
 */
export const PeopleImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generates an upload url for an temporary image of the specified type to an existing [Person](https://developers.intellihr.io/docs/v1/)
         * @summary Generate an temporary image upload URL for the provided Person.
         * @param {string} personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
         * @param {PersonIdImageCreateRequest} personIdImageCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemporaryImageUrl: async (personId: string, personIdImageCreateRequest: PersonIdImageCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('generateTemporaryImageUrl', 'personId', personId)
            // verify required parameter 'personIdImageCreateRequest' is not null or undefined
            assertParamExists('generateTemporaryImageUrl', 'personIdImageCreateRequest', personIdImageCreateRequest)
            const localVarPath = `/people/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: personIdImageCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/images',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(personIdImageCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current temporary image of the specified type for the provided [Person](https://developers.intellihr.io/docs/v1/).
         * @summary Get a temporary image
         * @param {string} personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
         * @param {string} [imageType] The Image Type. Enum: &#x60;PERSON_PROFILE&#x60;, &#x60;PROFILE_COVER&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemporaryImage: async (personId: string, imageType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getTemporaryImage', 'personId', personId)
            const localVarPath = `/people/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (imageType !== undefined) {
                localVarQueryParameter['imageType'] = imageType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/images',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates the temporary image as the active image on a [Person](https://developers.intellihr.io/docs/v1/), has some minor editing options.
         * @summary Promote temporary image
         * @param {string} personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
         * @param {PersonIdImagePatchRequest} personIdImagePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteImage: async (personId: string, personIdImagePatchRequest: PersonIdImagePatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('promoteImage', 'personId', personId)
            // verify required parameter 'personIdImagePatchRequest' is not null or undefined
            assertParamExists('promoteImage', 'personIdImagePatchRequest', personIdImagePatchRequest)
            const localVarPath = `/people/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: personIdImagePatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/images',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(personIdImagePatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleImagesApi - functional programming interface
 * @export
 */
export const PeopleImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Generates an upload url for an temporary image of the specified type to an existing [Person](https://developers.intellihr.io/docs/v1/)
         * @summary Generate an temporary image upload URL for the provided Person.
         * @param {PeopleImagesApiGenerateTemporaryImageUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTemporaryImageUrl(requestParameters: PeopleImagesApiGenerateTemporaryImageUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonIdImageCreateResponse>> {
            const personIdImageCreateRequest: PersonIdImageCreateRequest = {
                imageType: requestParameters.imageType,
                extension: requestParameters.extension
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTemporaryImageUrl(requestParameters.personId, personIdImageCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the current temporary image of the specified type for the provided [Person](https://developers.intellihr.io/docs/v1/).
         * @summary Get a temporary image
         * @param {PeopleImagesApiGetTemporaryImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemporaryImage(requestParameters: PeopleImagesApiGetTemporaryImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonIdImageFindResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemporaryImage(requestParameters.personId, requestParameters.imageType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activates the temporary image as the active image on a [Person](https://developers.intellihr.io/docs/v1/), has some minor editing options.
         * @summary Promote temporary image
         * @param {PeopleImagesApiPromoteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promoteImage(requestParameters: PeopleImagesApiPromoteImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const personIdImagePatchRequest: PersonIdImagePatchRequest = {
                imageType: requestParameters.imageType,
                rotation: requestParameters.rotation,
                coordinates: requestParameters.coordinates
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.promoteImage(requestParameters.personId, personIdImagePatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleImagesApi - factory interface
 * @export
 */
export const PeopleImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleImagesApiFp(configuration)
    return {
        /**
         * Generates an upload url for an temporary image of the specified type to an existing [Person](https://developers.intellihr.io/docs/v1/)
         * @summary Generate an temporary image upload URL for the provided Person.
         * @param {PeopleImagesApiGenerateTemporaryImageUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTemporaryImageUrl(requestParameters: PeopleImagesApiGenerateTemporaryImageUrlRequest, options?: AxiosRequestConfig): AxiosPromise<PersonIdImageCreateResponse> {
            return localVarFp.generateTemporaryImageUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current temporary image of the specified type for the provided [Person](https://developers.intellihr.io/docs/v1/).
         * @summary Get a temporary image
         * @param {PeopleImagesApiGetTemporaryImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemporaryImage(requestParameters: PeopleImagesApiGetTemporaryImageRequest, options?: AxiosRequestConfig): AxiosPromise<PersonIdImageFindResponse> {
            return localVarFp.getTemporaryImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Activates the temporary image as the active image on a [Person](https://developers.intellihr.io/docs/v1/), has some minor editing options.
         * @summary Promote temporary image
         * @param {PeopleImagesApiPromoteImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promoteImage(requestParameters: PeopleImagesApiPromoteImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promoteImage(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateTemporaryImageUrl operation in PeopleImagesApi.
 * @export
 * @interface PeopleImagesApiGenerateTemporaryImageUrlRequest
 */
export type PeopleImagesApiGenerateTemporaryImageUrlRequest = {
    
    /**
    * Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
    * @type {string}
    * @memberof PeopleImagesApiGenerateTemporaryImageUrl
    */
    readonly personId: string
    
} & PersonIdImageCreateRequest

/**
 * Request parameters for getTemporaryImage operation in PeopleImagesApi.
 * @export
 * @interface PeopleImagesApiGetTemporaryImageRequest
 */
export type PeopleImagesApiGetTemporaryImageRequest = {
    
    /**
    * Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
    * @type {string}
    * @memberof PeopleImagesApiGetTemporaryImage
    */
    readonly personId: string
    
    /**
    * The Image Type. Enum: `PERSON_PROFILE`, `PROFILE_COVER`.
    * @type {string}
    * @memberof PeopleImagesApiGetTemporaryImage
    */
    readonly imageType?: string
    
}

/**
 * Request parameters for promoteImage operation in PeopleImagesApi.
 * @export
 * @interface PeopleImagesApiPromoteImageRequest
 */
export type PeopleImagesApiPromoteImageRequest = {
    
    /**
    * Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
    * @type {string}
    * @memberof PeopleImagesApiPromoteImage
    */
    readonly personId: string
    
} & PersonIdImagePatchRequest

/**
 * PeopleImagesApiGenerated - object-oriented interface
 * @export
 * @class PeopleImagesApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleImagesApiGenerated extends BaseAPI {
    /**
     * Generates an upload url for an temporary image of the specified type to an existing [Person](https://developers.intellihr.io/docs/v1/)
     * @summary Generate an temporary image upload URL for the provided Person.
     * @param {PeopleImagesApiGenerateTemporaryImageUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleImagesApiGenerated
     */
    public generateTemporaryImageUrl(requestParameters: PeopleImagesApiGenerateTemporaryImageUrlRequest, options?: AxiosRequestConfig) {
        return PeopleImagesApiFp(this.configuration).generateTemporaryImageUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current temporary image of the specified type for the provided [Person](https://developers.intellihr.io/docs/v1/).
     * @summary Get a temporary image
     * @param {PeopleImagesApiGetTemporaryImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleImagesApiGenerated
     */
    public getTemporaryImage(requestParameters: PeopleImagesApiGetTemporaryImageRequest, options?: AxiosRequestConfig) {
        return PeopleImagesApiFp(this.configuration).getTemporaryImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activates the temporary image as the active image on a [Person](https://developers.intellihr.io/docs/v1/), has some minor editing options.
     * @summary Promote temporary image
     * @param {PeopleImagesApiPromoteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleImagesApiGenerated
     */
    public promoteImage(requestParameters: PeopleImagesApiPromoteImageRequest, options?: AxiosRequestConfig) {
        return PeopleImagesApiFp(this.configuration).promoteImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
