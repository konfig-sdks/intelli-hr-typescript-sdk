/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PeopleDocumentsCreateRequest } from '../models';
// @ts-ignore
import { PeopleDocumentsCreateResponse } from '../models';
// @ts-ignore
import { PeopleDocumentsFindResponse } from '../models';
// @ts-ignore
import { PeopleDocumentsPatchRequest } from '../models';
// @ts-ignore
import { PeopleDocumentsPatchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PeopleDocumentsApi - axios parameter creator
 * @export
 */
export const PeopleDocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {string} personId personId parameter
         * @param {PeopleDocumentsCreateRequest} peopleDocumentsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUploadUrl: async (personId: string, peopleDocumentsCreateRequest: PeopleDocumentsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('createPresignedUploadUrl', 'personId', personId)
            // verify required parameter 'peopleDocumentsCreateRequest' is not null or undefined
            assertParamExists('createPresignedUploadUrl', 'peopleDocumentsCreateRequest', peopleDocumentsCreateRequest)
            const localVarPath = `/people/{personId}/documents`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleDocumentsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/documents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleDocumentsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Documents](https://developers.intellihr.io/docs/v1/) of a given [person]((https://developers.intellihr.io/docs/v1/).
         * @summary List all Documents of a person
         * @param {string} personId Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
         * @param {number} [limit] The number of items per page
         * @param {number} [page] The page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (personId: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('list', 'personId', personId)
            const localVarPath = `/people/{personId}/documents`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/documents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Document
         * @summary 
         * @param {string} personId personId parameter
         * @param {PeopleDocumentsPatchRequest} peopleDocumentsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument: async (personId: string, peopleDocumentsPatchRequest: PeopleDocumentsPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updateDocument', 'personId', personId)
            // verify required parameter 'peopleDocumentsPatchRequest' is not null or undefined
            assertParamExists('updateDocument', 'peopleDocumentsPatchRequest', peopleDocumentsPatchRequest)
            const localVarPath = `/people/{personId}/documents/{id}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId !== undefined ? personId : `-personId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: peopleDocumentsPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/people/{personId}/documents/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(peopleDocumentsPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeopleDocumentsApi - functional programming interface
 * @export
 */
export const PeopleDocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeopleDocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {PeopleDocumentsApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPresignedUploadUrl(requestParameters: PeopleDocumentsApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleDocumentsCreateResponse>> {
            const peopleDocumentsCreateRequest: PeopleDocumentsCreateRequest = {
                filename: requestParameters.filename,
                mime: requestParameters.mime,
                size: requestParameters.size,
                extension: requestParameters.extension
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPresignedUploadUrl(requestParameters.personId, peopleDocumentsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Documents](https://developers.intellihr.io/docs/v1/) of a given [person]((https://developers.intellihr.io/docs/v1/).
         * @summary List all Documents of a person
         * @param {PeopleDocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: PeopleDocumentsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleDocumentsFindResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.personId, requestParameters.limit, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a Document
         * @summary 
         * @param {PeopleDocumentsApiUpdateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocument(requestParameters: PeopleDocumentsApiUpdateDocumentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeopleDocumentsPatchResponse>> {
            const peopleDocumentsPatchRequest: PeopleDocumentsPatchRequest = {
                filename: requestParameters.filename,
                uploadStatus: requestParameters.uploadStatus
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocument(requestParameters.personId, peopleDocumentsPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PeopleDocumentsApi - factory interface
 * @export
 */
export const PeopleDocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeopleDocumentsApiFp(configuration)
    return {
        /**
         * Create a presigned upload URL
         * @summary 
         * @param {PeopleDocumentsApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPresignedUploadUrl(requestParameters: PeopleDocumentsApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleDocumentsCreateResponse> {
            return localVarFp.createPresignedUploadUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Documents](https://developers.intellihr.io/docs/v1/) of a given [person]((https://developers.intellihr.io/docs/v1/).
         * @summary List all Documents of a person
         * @param {PeopleDocumentsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: PeopleDocumentsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleDocumentsFindResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a Document
         * @summary 
         * @param {PeopleDocumentsApiUpdateDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocument(requestParameters: PeopleDocumentsApiUpdateDocumentRequest, options?: AxiosRequestConfig): AxiosPromise<PeopleDocumentsPatchResponse> {
            return localVarFp.updateDocument(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPresignedUploadUrl operation in PeopleDocumentsApi.
 * @export
 * @interface PeopleDocumentsApiCreatePresignedUploadUrlRequest
 */
export type PeopleDocumentsApiCreatePresignedUploadUrlRequest = {
    
    /**
    * personId parameter
    * @type {string}
    * @memberof PeopleDocumentsApiCreatePresignedUploadUrl
    */
    readonly personId: string
    
} & PeopleDocumentsCreateRequest

/**
 * Request parameters for list operation in PeopleDocumentsApi.
 * @export
 * @interface PeopleDocumentsApiListRequest
 */
export type PeopleDocumentsApiListRequest = {
    
    /**
    * Id string param for relevant [Person](https://developers.intellihr.io/docs/v1/)
    * @type {string}
    * @memberof PeopleDocumentsApiList
    */
    readonly personId: string
    
    /**
    * The number of items per page
    * @type {number}
    * @memberof PeopleDocumentsApiList
    */
    readonly limit?: number
    
    /**
    * The page number
    * @type {number}
    * @memberof PeopleDocumentsApiList
    */
    readonly page?: number
    
}

/**
 * Request parameters for updateDocument operation in PeopleDocumentsApi.
 * @export
 * @interface PeopleDocumentsApiUpdateDocumentRequest
 */
export type PeopleDocumentsApiUpdateDocumentRequest = {
    
    /**
    * personId parameter
    * @type {string}
    * @memberof PeopleDocumentsApiUpdateDocument
    */
    readonly personId: string
    
} & PeopleDocumentsPatchRequest

/**
 * PeopleDocumentsApiGenerated - object-oriented interface
 * @export
 * @class PeopleDocumentsApiGenerated
 * @extends {BaseAPI}
 */
export class PeopleDocumentsApiGenerated extends BaseAPI {
    /**
     * Create a presigned upload URL
     * @summary 
     * @param {PeopleDocumentsApiCreatePresignedUploadUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleDocumentsApiGenerated
     */
    public createPresignedUploadUrl(requestParameters: PeopleDocumentsApiCreatePresignedUploadUrlRequest, options?: AxiosRequestConfig) {
        return PeopleDocumentsApiFp(this.configuration).createPresignedUploadUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Documents](https://developers.intellihr.io/docs/v1/) of a given [person]((https://developers.intellihr.io/docs/v1/).
     * @summary List all Documents of a person
     * @param {PeopleDocumentsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleDocumentsApiGenerated
     */
    public list(requestParameters: PeopleDocumentsApiListRequest, options?: AxiosRequestConfig) {
        return PeopleDocumentsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a Document
     * @summary 
     * @param {PeopleDocumentsApiUpdateDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeopleDocumentsApiGenerated
     */
    public updateDocument(requestParameters: PeopleDocumentsApiUpdateDocumentRequest, options?: AxiosRequestConfig) {
        return PeopleDocumentsApiFp(this.configuration).updateDocument(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
