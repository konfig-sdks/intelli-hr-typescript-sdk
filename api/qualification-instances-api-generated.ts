/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { QualificationInstancesCreateRequest } from '../models';
// @ts-ignore
import { QualificationInstancesCreateRequestIssuingOrganisation } from '../models';
// @ts-ignore
import { QualificationInstancesCreateRequestNotes } from '../models';
// @ts-ignore
import { QualificationInstancesCreateRequestRegistrationNumber } from '../models';
// @ts-ignore
import { QualificationInstancesListAllFiltersParameter } from '../models';
// @ts-ignore
import { QualificationInstancesPatchRequest } from '../models';
// @ts-ignore
import { Qualifications } from '../models';
// @ts-ignore
import { QualificationsList } from '../models';
// @ts-ignore
import { RFC3339DatetimeProperty10 } from '../models';
// @ts-ignore
import { RFC3339DatetimeProperty11 } from '../models';
// @ts-ignore
import { RFC3339DatetimeProperty9 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QualificationInstancesApi - axios parameter creator
 * @export
 */
export const QualificationInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the created [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Qualification Instance
         * @param {QualificationInstancesCreateRequest} qualificationInstancesCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewInstance: async (qualificationInstancesCreateRequest: QualificationInstancesCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualificationInstancesCreateRequest' is not null or undefined
            assertParamExists('createNewInstance', 'qualificationInstancesCreateRequest', qualificationInstancesCreateRequest)
            const localVarPath = `/qualifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: qualificationInstancesCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/qualifications',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(qualificationInstancesCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes the [Qualification Instance](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualifications/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/qualifications/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single [Qualification Instance](https://developers.intellihr.io/docs/v1/) by its identifier.
         * @summary Find a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualifications/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/qualifications/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all Qualification Instances
         * @param {QualificationInstancesListAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[personId][eq]&#x3D;dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filters?: QualificationInstancesListAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/qualifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/qualifications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the updated [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Qualification Instance by ID
         * @param {QualificationInstancesPatchRequest} qualificationInstancesPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceById: async (qualificationInstancesPatchRequest: QualificationInstancesPatchRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'qualificationInstancesPatchRequest' is not null or undefined
            assertParamExists('updateInstanceById', 'qualificationInstancesPatchRequest', qualificationInstancesPatchRequest)
            const localVarPath = `/qualifications/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: qualificationInstancesPatchRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/qualifications/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(qualificationInstancesPatchRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QualificationInstancesApi - functional programming interface
 * @export
 */
export const QualificationInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QualificationInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the created [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Qualification Instance
         * @param {QualificationInstancesApiCreateNewInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewInstance(requestParameters: QualificationInstancesApiCreateNewInstanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Qualifications>> {
            const qualificationInstancesCreateRequest: QualificationInstancesCreateRequest = {
                personId: requestParameters.personId,
                qualificationLibraryItemId: requestParameters.qualificationLibraryItemId,
                status: requestParameters.status,
                issuingOrganisation: requestParameters.issuingOrganisation,
                registrationNumber: requestParameters.registrationNumber,
                issueDate: requestParameters.issueDate,
                expiryDate: requestParameters.expiryDate,
                expiryNotificationQueuedAt: requestParameters.expiryNotificationQueuedAt,
                notes: requestParameters.notes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewInstance(qualificationInstancesCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes the [Qualification Instance](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single [Qualification Instance](https://developers.intellihr.io/docs/v1/) by its identifier.
         * @summary Find a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Qualifications>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all Qualification Instances
         * @param {QualificationInstancesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: QualificationInstancesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the updated [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Qualification Instance by ID
         * @param {QualificationInstancesApiUpdateInstanceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInstanceById(requestParameters: QualificationInstancesApiUpdateInstanceByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Qualifications>> {
            const qualificationInstancesPatchRequest: QualificationInstancesPatchRequest = {
                status: requestParameters.status,
                issuingOrganisation: requestParameters.issuingOrganisation,
                registrationNumber: requestParameters.registrationNumber,
                issueDate: requestParameters.issueDate,
                expiryDate: requestParameters.expiryDate,
                expiryNotificationQueuedAt: requestParameters.expiryNotificationQueuedAt,
                notes: requestParameters.notes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInstanceById(qualificationInstancesPatchRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QualificationInstancesApi - factory interface
 * @export
 */
export const QualificationInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QualificationInstancesApiFp(configuration)
    return {
        /**
         * Returns the created [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Create a new Qualification Instance
         * @param {QualificationInstancesApiCreateNewInstanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewInstance(requestParameters: QualificationInstancesApiCreateNewInstanceRequest, options?: AxiosRequestConfig): AxiosPromise<Qualifications> {
            return localVarFp.createNewInstance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes the [Qualification Instance](https://developers.intellihr.io/docs/v1/) by the given ID.
         * @summary Delete a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single [Qualification Instance](https://developers.intellihr.io/docs/v1/) by its identifier.
         * @summary Find a Qualification Instance by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(options?: AxiosRequestConfig): AxiosPromise<Qualifications> {
            return localVarFp.findById(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all Qualification Instances
         * @param {QualificationInstancesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: QualificationInstancesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<QualificationsList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the updated [Qualification Instance](https://developers.intellihr.io/docs/v1/).
         * @summary Update a Qualification Instance by ID
         * @param {QualificationInstancesApiUpdateInstanceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInstanceById(requestParameters: QualificationInstancesApiUpdateInstanceByIdRequest, options?: AxiosRequestConfig): AxiosPromise<Qualifications> {
            return localVarFp.updateInstanceById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewInstance operation in QualificationInstancesApi.
 * @export
 * @interface QualificationInstancesApiCreateNewInstanceRequest
 */
export type QualificationInstancesApiCreateNewInstanceRequest = {
    
} & QualificationInstancesCreateRequest

/**
 * Request parameters for listAll operation in QualificationInstancesApi.
 * @export
 * @interface QualificationInstancesApiListAllRequest
 */
export type QualificationInstancesApiListAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[personId][eq]=dc996d73-a75e-499c-a96e-bd7d0df45f57,26d0ffc4-60f6-4672-a603-caaa4564af12`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {QualificationInstancesListAllFiltersParameter}
    * @memberof QualificationInstancesApiListAll
    */
    readonly filters?: QualificationInstancesListAllFiltersParameter
    
}

/**
 * Request parameters for updateInstanceById operation in QualificationInstancesApi.
 * @export
 * @interface QualificationInstancesApiUpdateInstanceByIdRequest
 */
export type QualificationInstancesApiUpdateInstanceByIdRequest = {
    
} & QualificationInstancesPatchRequest

/**
 * QualificationInstancesApiGenerated - object-oriented interface
 * @export
 * @class QualificationInstancesApiGenerated
 * @extends {BaseAPI}
 */
export class QualificationInstancesApiGenerated extends BaseAPI {
    /**
     * Returns the created [Qualification Instance](https://developers.intellihr.io/docs/v1/).
     * @summary Create a new Qualification Instance
     * @param {QualificationInstancesApiCreateNewInstanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationInstancesApiGenerated
     */
    public createNewInstance(requestParameters: QualificationInstancesApiCreateNewInstanceRequest, options?: AxiosRequestConfig) {
        return QualificationInstancesApiFp(this.configuration).createNewInstance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes the [Qualification Instance](https://developers.intellihr.io/docs/v1/) by the given ID.
     * @summary Delete a Qualification Instance by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationInstancesApiGenerated
     */
    public deleteById(options?: AxiosRequestConfig) {
        return QualificationInstancesApiFp(this.configuration).deleteById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single [Qualification Instance](https://developers.intellihr.io/docs/v1/) by its identifier.
     * @summary Find a Qualification Instance by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationInstancesApiGenerated
     */
    public findById(options?: AxiosRequestConfig) {
        return QualificationInstancesApiFp(this.configuration).findById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all Qualification Instances
     * @param {QualificationInstancesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationInstancesApiGenerated
     */
    public listAll(requestParameters: QualificationInstancesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return QualificationInstancesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the updated [Qualification Instance](https://developers.intellihr.io/docs/v1/).
     * @summary Update a Qualification Instance by ID
     * @param {QualificationInstancesApiUpdateInstanceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QualificationInstancesApiGenerated
     */
    public updateInstanceById(requestParameters: QualificationInstancesApiUpdateInstanceByIdRequest, options?: AxiosRequestConfig) {
        return QualificationInstancesApiFp(this.configuration).updateInstanceById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
