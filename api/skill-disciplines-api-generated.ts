/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SkillDisciplines } from '../models';
// @ts-ignore
import { SkillDisciplinesCreate } from '../models';
// @ts-ignore
import { SkillDisciplinesList } from '../models';
// @ts-ignore
import { SkillDisciplinesListAllFiltersParameter } from '../models';
// @ts-ignore
import { SkillDisciplinesPatch } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SkillDisciplinesApi - axios parameter creator
 * @export
 */
export const SkillDisciplinesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a Skill Discipline
         * @param {SkillDisciplinesCreate} skillDisciplinesCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDiscipline: async (skillDisciplinesCreate: SkillDisciplinesCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillDisciplinesCreate' is not null or undefined
            assertParamExists('createNewDiscipline', 'skillDisciplinesCreate', skillDisciplinesCreate)
            const localVarPath = `/skill-disciplines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillDisciplinesCreate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill-disciplines',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillDisciplinesCreate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single webhook.
         * @summary Find a Skill Discipline by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skill-disciplines/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill-disciplines/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Skill Disciplines](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Skill Disciplines
         * @param {SkillDisciplinesListAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[name][eq]&#x3D;Accounting&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filters?: SkillDisciplinesListAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/skill-disciplines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill-disciplines',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch a Skill Discipline
         * @param {SkillDisciplinesPatch} skillDisciplinesPatch 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisciplineById: async (skillDisciplinesPatch: SkillDisciplinesPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'skillDisciplinesPatch' is not null or undefined
            assertParamExists('updateDisciplineById', 'skillDisciplinesPatch', skillDisciplinesPatch)
            const localVarPath = `/skill-disciplines/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: skillDisciplinesPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/skill-disciplines/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(skillDisciplinesPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SkillDisciplinesApi - functional programming interface
 * @export
 */
export const SkillDisciplinesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SkillDisciplinesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a Skill Discipline
         * @param {SkillDisciplinesApiCreateNewDisciplineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDiscipline(requestParameters: SkillDisciplinesApiCreateNewDisciplineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDisciplines>> {
            const skillDisciplinesCreate: SkillDisciplinesCreate = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDiscipline(skillDisciplinesCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single webhook.
         * @summary Find a Skill Discipline by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDisciplines>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Skill Disciplines](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Skill Disciplines
         * @param {SkillDisciplinesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: SkillDisciplinesApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDisciplinesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patch a Skill Discipline
         * @param {SkillDisciplinesApiUpdateDisciplineByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDisciplineById(requestParameters: SkillDisciplinesApiUpdateDisciplineByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkillDisciplines>> {
            const skillDisciplinesPatch: SkillDisciplinesPatch = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDisciplineById(skillDisciplinesPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SkillDisciplinesApi - factory interface
 * @export
 */
export const SkillDisciplinesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SkillDisciplinesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a Skill Discipline
         * @param {SkillDisciplinesApiCreateNewDisciplineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDiscipline(requestParameters: SkillDisciplinesApiCreateNewDisciplineRequest, options?: AxiosRequestConfig): AxiosPromise<SkillDisciplines> {
            return localVarFp.createNewDiscipline(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single webhook.
         * @summary Find a Skill Discipline by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(options?: AxiosRequestConfig): AxiosPromise<SkillDisciplines> {
            return localVarFp.findById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Skill Disciplines](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Skill Disciplines
         * @param {SkillDisciplinesApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: SkillDisciplinesApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SkillDisciplinesList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch a Skill Discipline
         * @param {SkillDisciplinesApiUpdateDisciplineByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDisciplineById(requestParameters: SkillDisciplinesApiUpdateDisciplineByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SkillDisciplines> {
            return localVarFp.updateDisciplineById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDiscipline operation in SkillDisciplinesApi.
 * @export
 * @interface SkillDisciplinesApiCreateNewDisciplineRequest
 */
export type SkillDisciplinesApiCreateNewDisciplineRequest = {
    
} & SkillDisciplinesCreate

/**
 * Request parameters for listAll operation in SkillDisciplinesApi.
 * @export
 * @interface SkillDisciplinesApiListAllRequest
 */
export type SkillDisciplinesApiListAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[name][eq]=Accounting`  Below is a list of operation types available on filters, note that each filter may not support every type:  â€¢ Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {SkillDisciplinesListAllFiltersParameter}
    * @memberof SkillDisciplinesApiListAll
    */
    readonly filters?: SkillDisciplinesListAllFiltersParameter
    
}

/**
 * Request parameters for updateDisciplineById operation in SkillDisciplinesApi.
 * @export
 * @interface SkillDisciplinesApiUpdateDisciplineByIdRequest
 */
export type SkillDisciplinesApiUpdateDisciplineByIdRequest = {
    
} & SkillDisciplinesPatch

/**
 * SkillDisciplinesApiGenerated - object-oriented interface
 * @export
 * @class SkillDisciplinesApiGenerated
 * @extends {BaseAPI}
 */
export class SkillDisciplinesApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create a Skill Discipline
     * @param {SkillDisciplinesApiCreateNewDisciplineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillDisciplinesApiGenerated
     */
    public createNewDiscipline(requestParameters: SkillDisciplinesApiCreateNewDisciplineRequest, options?: AxiosRequestConfig) {
        return SkillDisciplinesApiFp(this.configuration).createNewDiscipline(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single webhook.
     * @summary Find a Skill Discipline by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillDisciplinesApiGenerated
     */
    public findById(options?: AxiosRequestConfig) {
        return SkillDisciplinesApiFp(this.configuration).findById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Skill Disciplines](https://developers.intellihr.io/docs/v1/) recorded in the system.
     * @summary List all Skill Disciplines
     * @param {SkillDisciplinesApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillDisciplinesApiGenerated
     */
    public listAll(requestParameters: SkillDisciplinesApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return SkillDisciplinesApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch a Skill Discipline
     * @param {SkillDisciplinesApiUpdateDisciplineByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SkillDisciplinesApiGenerated
     */
    public updateDisciplineById(requestParameters: SkillDisciplinesApiUpdateDisciplineByIdRequest, options?: AxiosRequestConfig) {
        return SkillDisciplinesApiFp(this.configuration).updateDisciplineById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
