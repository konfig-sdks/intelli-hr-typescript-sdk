/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PermissionGroups } from '../models';
// @ts-ignore
import { PermissionGroupsList } from '../models';
// @ts-ignore
import { PermissionGroupsListAllFiltersParameter } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PermissionGroupsApi - axios parameter creator
 * @export
 */
export const PermissionGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single [Permission Groups](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Permission Group by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGroupById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permission-groups/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/permission-groups/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Permission Groups](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Permission Groups
         * @param {PermissionGroupsListAllFiltersParameter} [filters] Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format &#x60;filters[&lt;filter_name&gt;][&lt;operation_type&gt;]&#x3D;&lt;filter_value&gt;&#x60;.For example, a filter to get items matching a specific filter value would be &#x60;filters[isEnabled][eq]&#x3D;true&#x60;  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality &#x60;[eq]&#x60;: Checks for an exact match with the given filter value  The list of supported filters is given below.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (filters?: PermissionGroupsListAllFiltersParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/permission-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/permission-groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionGroupsApi - functional programming interface
 * @export
 */
export const PermissionGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single [Permission Groups](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Permission Group by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGroupById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionGroups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findGroupById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Permission Groups](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Permission Groups
         * @param {PermissionGroupsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: PermissionGroupsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PermissionGroupsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PermissionGroupsApi - factory interface
 * @export
 */
export const PermissionGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionGroupsApiFp(configuration)
    return {
        /**
         * Returns a single [Permission Groups](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Permission Group by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGroupById(options?: AxiosRequestConfig): AxiosPromise<PermissionGroups> {
            return localVarFp.findGroupById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Permission Groups](https://developers.intellihr.io/docs/v1/) recorded in the system.
         * @summary List all Permission Groups
         * @param {PermissionGroupsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: PermissionGroupsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PermissionGroupsList> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listAll operation in PermissionGroupsApi.
 * @export
 * @interface PermissionGroupsApiListAllRequest
 */
export type PermissionGroupsApiListAllRequest = {
    
    /**
    * Filters can be applied in the query string to limit the data returned from this endpoint. Filters are provided in the format `filters[<filter_name>][<operation_type>]=<filter_value>`.For example, a filter to get items matching a specific filter value would be `filters[isEnabled][eq]=true`  Below is a list of operation types available on filters, note that each filter may not support every type:  • Equality `[eq]`: Checks for an exact match with the given filter value  The list of supported filters is given below.
    * @type {PermissionGroupsListAllFiltersParameter}
    * @memberof PermissionGroupsApiListAll
    */
    readonly filters?: PermissionGroupsListAllFiltersParameter
    
}

/**
 * PermissionGroupsApiGenerated - object-oriented interface
 * @export
 * @class PermissionGroupsApiGenerated
 * @extends {BaseAPI}
 */
export class PermissionGroupsApiGenerated extends BaseAPI {
    /**
     * Returns a single [Permission Groups](https://developers.intellihr.io/docs/v1/).
     * @summary Find a Permission Group by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionGroupsApiGenerated
     */
    public findGroupById(options?: AxiosRequestConfig) {
        return PermissionGroupsApiFp(this.configuration).findGroupById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Permission Groups](https://developers.intellihr.io/docs/v1/) recorded in the system.
     * @summary List all Permission Groups
     * @param {PermissionGroupsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionGroupsApiGenerated
     */
    public listAll(requestParameters: PermissionGroupsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return PermissionGroupsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
