/* tslint:disable */
/* eslint-disable */
/*
intelliHR Public API

You can find developer's guide and more documentation on [https://developers.intellihr.io](https://developers.intellihr.io)

The version of the OpenAPI document: V1
Contact: support@intellihr.co

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TrainingTypes } from '../models';
// @ts-ignore
import { TrainingTypesList } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrainingTypesApi - axios parameter creator
 * @export
 */
export const TrainingTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single [Training Type](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Training Type by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/training-types/{id}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/training-types/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all [Training Types](https://developers.intellihr.io/docs/v1/).
         * @summary List all Training Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/training-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKey", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/training-types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingTypesApi - functional programming interface
 * @export
 */
export const TrainingTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single [Training Type](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Training Type by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findById(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all [Training Types](https://developers.intellihr.io/docs/v1/).
         * @summary List all Training Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingTypesList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainingTypesApi - factory interface
 * @export
 */
export const TrainingTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingTypesApiFp(configuration)
    return {
        /**
         * Returns a single [Training Type](https://developers.intellihr.io/docs/v1/).
         * @summary Find a Training Type by ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(options?: AxiosRequestConfig): AxiosPromise<TrainingTypes> {
            return localVarFp.findById(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all [Training Types](https://developers.intellihr.io/docs/v1/).
         * @summary List all Training Types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(options?: AxiosRequestConfig): AxiosPromise<TrainingTypesList> {
            return localVarFp.listAll(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainingTypesApiGenerated - object-oriented interface
 * @export
 * @class TrainingTypesApiGenerated
 * @extends {BaseAPI}
 */
export class TrainingTypesApiGenerated extends BaseAPI {
    /**
     * Returns a single [Training Type](https://developers.intellihr.io/docs/v1/).
     * @summary Find a Training Type by ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingTypesApiGenerated
     */
    public findById(options?: AxiosRequestConfig) {
        return TrainingTypesApiFp(this.configuration).findById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all [Training Types](https://developers.intellihr.io/docs/v1/).
     * @summary List all Training Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingTypesApiGenerated
     */
    public listAll(options?: AxiosRequestConfig) {
        return TrainingTypesApiFp(this.configuration).listAll(options).then((request) => request(this.axios, this.basePath));
    }
}
